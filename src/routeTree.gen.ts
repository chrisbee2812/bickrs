/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ProjectsRouteRouteImport } from './routes/projects/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsTictactoeRouteImport } from './routes/projects/tictactoe'
import { Route as ProjectsHtmlRouteImport } from './routes/projects/html'
import { Route as ProjectsHangmanRouteImport } from './routes/projects/hangman'
import { Route as ProjectsCssRouteImport } from './routes/projects/css'

const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRouteRoute = ProjectsRouteRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsTictactoeRoute = ProjectsTictactoeRouteImport.update({
  id: '/tictactoe',
  path: '/tictactoe',
  getParentRoute: () => ProjectsRouteRoute,
} as any)
const ProjectsHtmlRoute = ProjectsHtmlRouteImport.update({
  id: '/html',
  path: '/html',
  getParentRoute: () => ProjectsRouteRoute,
} as any)
const ProjectsHangmanRoute = ProjectsHangmanRouteImport.update({
  id: '/hangman',
  path: '/hangman',
  getParentRoute: () => ProjectsRouteRoute,
} as any)
const ProjectsCssRoute = ProjectsCssRouteImport.update({
  id: '/css',
  path: '/css',
  getParentRoute: () => ProjectsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/projects/css': typeof ProjectsCssRoute
  '/projects/hangman': typeof ProjectsHangmanRoute
  '/projects/html': typeof ProjectsHtmlRoute
  '/projects/tictactoe': typeof ProjectsTictactoeRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/projects/css': typeof ProjectsCssRoute
  '/projects/hangman': typeof ProjectsHangmanRoute
  '/projects/html': typeof ProjectsHtmlRoute
  '/projects/tictactoe': typeof ProjectsTictactoeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/projects/css': typeof ProjectsCssRoute
  '/projects/hangman': typeof ProjectsHangmanRoute
  '/projects/html': typeof ProjectsHtmlRoute
  '/projects/tictactoe': typeof ProjectsTictactoeRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects'
    | '/about'
    | '/contact'
    | '/projects/css'
    | '/projects/hangman'
    | '/projects/html'
    | '/projects/tictactoe'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects'
    | '/about'
    | '/contact'
    | '/projects/css'
    | '/projects/hangman'
    | '/projects/html'
    | '/projects/tictactoe'
  id:
    | '__root__'
    | '/'
    | '/projects'
    | '/about'
    | '/contact'
    | '/projects/css'
    | '/projects/hangman'
    | '/projects/html'
    | '/projects/tictactoe'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsRouteRoute: typeof ProjectsRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/tictactoe': {
      id: '/projects/tictactoe'
      path: '/tictactoe'
      fullPath: '/projects/tictactoe'
      preLoaderRoute: typeof ProjectsTictactoeRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
    '/projects/html': {
      id: '/projects/html'
      path: '/html'
      fullPath: '/projects/html'
      preLoaderRoute: typeof ProjectsHtmlRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
    '/projects/hangman': {
      id: '/projects/hangman'
      path: '/hangman'
      fullPath: '/projects/hangman'
      preLoaderRoute: typeof ProjectsHangmanRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
    '/projects/css': {
      id: '/projects/css'
      path: '/css'
      fullPath: '/projects/css'
      preLoaderRoute: typeof ProjectsCssRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
  }
}

interface ProjectsRouteRouteChildren {
  ProjectsCssRoute: typeof ProjectsCssRoute
  ProjectsHangmanRoute: typeof ProjectsHangmanRoute
  ProjectsHtmlRoute: typeof ProjectsHtmlRoute
  ProjectsTictactoeRoute: typeof ProjectsTictactoeRoute
}

const ProjectsRouteRouteChildren: ProjectsRouteRouteChildren = {
  ProjectsCssRoute: ProjectsCssRoute,
  ProjectsHangmanRoute: ProjectsHangmanRoute,
  ProjectsHtmlRoute: ProjectsHtmlRoute,
  ProjectsTictactoeRoute: ProjectsTictactoeRoute,
}

const ProjectsRouteRouteWithChildren = ProjectsRouteRoute._addFileChildren(
  ProjectsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsRouteRoute: ProjectsRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
